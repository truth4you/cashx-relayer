// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DCAOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DCAOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DCAOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DCAOrder", id.toString(), this);
  }

  static load(id: string): DCAOrder | null {
    return store.get("DCAOrder", id) as DCAOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get numOfOrders(): i32 {
    let value = this.get("numOfOrders");
    return value.toI32();
  }

  set numOfOrders(value: i32) {
    this.set("numOfOrders", Value.fromI32(value));
  }

  get interval(): BigInt {
    let value = this.get("interval");
    return value.toBigInt();
  }

  set interval(value: BigInt) {
    this.set("interval", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get minPrice(): BigInt | null {
    let value = this.get("minPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("minPrice");
    } else {
      this.set("minPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get maxPrice(): BigInt | null {
    let value = this.get("maxPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("maxPrice");
    } else {
      this.set("maxPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get closedAt(): BigInt | null {
    let value = this.get("closedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("closedAt");
    } else {
      this.set("closedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get createdHash(): string {
    let value = this.get("createdHash");
    return value.toString();
  }

  set createdHash(value: string) {
    this.set("createdHash", Value.fromString(value));
  }

  get closedHash(): string | null {
    let value = this.get("closedHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set closedHash(value: string | null) {
    if (value === null) {
      this.unset("closedHash");
    } else {
      this.set("closedHash", Value.fromString(value as string));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get executedOrders(): Array<string> {
    let value = this.get("executedOrders");
    return value.toStringArray();
  }

  set executedOrders(value: Array<string>) {
    this.set("executedOrders", Value.fromStringArray(value));
  }
}

export class SubOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SubOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SubOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SubOrder", id.toString(), this);
  }

  static load(id: string): SubOrder | null {
    return store.get("SubOrder", id) as SubOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get executedAt(): BigInt {
    let value = this.get("executedAt");
    return value.toBigInt();
  }

  set executedAt(value: BigInt) {
    this.set("executedAt", Value.fromBigInt(value));
  }

  get executedHash(): string {
    let value = this.get("executedHash");
    return value.toString();
  }

  set executedHash(value: string) {
    this.set("executedHash", Value.fromString(value));
  }

  get dcaOrderId(): string {
    let value = this.get("dcaOrderId");
    return value.toString();
  }

  set dcaOrderId(value: string) {
    this.set("dcaOrderId", Value.fromString(value));
  }
}
